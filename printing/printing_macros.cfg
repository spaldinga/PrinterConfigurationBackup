[include printing_variables.cfg]

[gcode_macro PRINT_START]
# Originaly copied from jontek2 (https://github.com/jontek2/A-better-print_start-macro)
gcode:
    LOG_DEBUG MSG="Starting PRINT_START macro"
    {% set z_tilt = printer["gcode_macro _print_variables"].z_tilt|default(False) %}
    {% set qgl = printer["gcode_macro _print_variables"].qgl|default(False) %}
    {% set bed_mesh = printer["gcode_macro _print_variables"].bed_mesh|default(False) %}
    {% set chamber_temp = printer["gcode_macro _print_variables"].chamber_temp|default(False) %}
    {% set adaptive_purge = printer["gcode_macro _print_variables"].adaptive_purge|default(False) %}
    {% set is_enclosed = printer["gcode_macro _print_variables"].is_enclosed|default(False) %}
    LOG_DEBUG MSG="z_tilt = {z_tilt}, qgl = {qgl}, bed_mesh = {bed_mesh}, chamber_temp = {chamber_temp}, adaptive_purge = {adaptive_purge}, is_enclosed = {is_enclosed}"
    
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("0")|int %}
    {% set target_filament = params.FILAMENT %}

    {% if target_chamber == 0 %}
      {% if target_filament == 'ABS' %}
        {% set target_chamber = 45 %}
      {% elif target_filament == 'ASA' %}
        {% set target_chamber = 45 %}
      {% elif target_filament == 'PLA' %}
        {% set target_chamber = 25 %}
      {% elif target_filament == 'PET' %}
        {% set target_chamber = 25 %}
      {% elif target_filament == 'TPU' %}
        {% set target_chamber = 25 %}
      {% endif %}
    {% endif %}

    LOG_VERBOSE MSG="Printer temps: extruderTemp: {target_extruder}, bedTemp: {target_bed}, filament: {target_filament}, chamberTemp: {target_chamber}"

    LOG_INFORMATION MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                     # Sets SB-leds to heating-mode

    ENABLE_FANS_TURBO

    LOG_VERBOSE MSG="Sets the target temp for the bed"
    M140 S{target_bed}                                  # Sets the target temp for the bed

    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set z_wait = printer.toolhead.axis_maximum.z|float / 2 %}
    LOG_VERBOSE MSG="x_wait = {x_wait},y_wait = {y_wait}"

    # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    LOG_DEBUG MSG="Homing"
    STATUS_HOMING         # Sets SB-leds to homing-mode
    LOG_VERBOSE MSG="Full home XYZ"
    G28                   # Full home (XYZ)
    LOG_VERBOSE MSG="Absolut position"
    G90                   # Absolut position

    LOG_DEBUG MSG="Clears old saved bed mesh"
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

    LOG_VERBOSE MSG="Goes to center of the bed"
    G1 X{x_wait} Y{y_wait} Z{z_wait} F9000                    # Goes to center of the bed

    LOG_VERBOSE MSG="Wait for target temp of the bed"
    M190 S{target_bed}                                  # Sets the target temp for the bed

    {% if is_enclosed %}
      # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
      {% if target_chamber > 40 and printer["temperature_sensor chamber"].temperature < target_chamber %}
        LOG_DEBUG MSG="Checks if the target_chamber is higher than 0c - if so then trigger a heatsoak."
        M106 S255                                           # Turns on the PT-fan
  
        {% if chamber_temp %}
        LOG_VERBOSE MSG="Sets the target temp for the bed"
        LOG_INFORMATION MSG="Heatsoak: {target_chamber}c"   # Displays info
        LOG_VERBOSE MSG="Waits for chamber to reach desired temp"
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
        {% else %}
          LOG_INFORMATION MSG="Soak for 30min"                 # Displays info
          G4 P1800000                                          # Waits 30 min for the bedtemp to stabilize
        {% endif %}
      # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
      {% elif printer["temperature_sensor chamber"].temperature < 40 %}
        LOG_DEBUG MSG="If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak"
        LOG_INFORMATION MSG="Wait for buildplate to reach temp {target_bed}c"
        TEMPERATURE_WAIT SENSOR="temperature_sensor buildplate" MINIMUM={target_bed-5}   # Waits for chamber to reach desired temp
        #LOG_INFORMATION MSG="Soak for 5min"
        #G4 P300000   # 1 min = P60000 (60000 ms)
      {% endif %}
    {% endif %}

    ENABLE_FANS
    
    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    LOG_INFORMATION MSG="Hotend: 150c"            # Displays info
    M109 S150                                     # Heats the nozzle to 150c

    CLEAN_NOZZLE

    {% if z_tilt %}
      LOG_INFORMATION MSG="Z-tilt adjust"      # Displays info
      STATUS_LEVELING                          # Sets SB-leds to leveling-mode
      Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
      LOG_VERBOSE MSG="Homes Z again after z_tilt_adjust"
      G28 Z                                    # Homes Z again after z_tilt_adjust
    {% elif qgl %}
      LOG_INFORMATION MSG="QGL adjust"         # Displays info
      STATUS_LEVELING                          # Sets SB-leds to leveling-mode
      QUAD_GANTRY_LEVEL                        # Levels the buildplate via z_tilt_adjust
      LOG_VERBOSE MSG="Homes Z again after QGL"
      G28 Z                                    # Homes Z again after z_tilt_adjust
    {% endif %}

    {% if bed_mesh %}
      LOG_INFORMATION MSG="Bed mesh"      # Displays info
      STATUS_MESHING                      # Sets SB-leds to bed mesh-mode
      BED_MESH_CALIBRATE                  # Starts bed mesh
    {% endif %}

    # Heats up the nozzle up to target via data from slicer
    LOG_INFORMATION MSG="Hotend: {target_extruder}c"              # Displays info
    STATUS_HEATING                                                # Sets SB-leds to heating-mode
    #LOG_VERBOSE MSG="Goes to center of the bed"
    #G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
    LOG_VERBOSE MSG="Smart park before heating nozzle"
    Smart_Park
    LOG_VERBOSE MSG="Turns off partcooling fan"
    M107                                                          # Turns off partcooling fan
    LOG_VERBOSE MSG="Heats the nozzle to printing temp"
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    # Gets ready to print by doing a purge line and updating the SB-leds
    LOG_INFORMATION MSG="Printer goes brr"            # Displays info
    #FILAMENT_MOTION_SENSOR_ENABLE
    STATUS_PRINTING                                  # Sets SB-leds to printing-mode
    LOG_VERBOSE MSG="Moves to starting point"
    LOG_VERBOSE MSG="Raises Z to 0.4"
    G0 Z0.4                                          # Raises Z to 0.4
    {% if adaptive_purge %}
      LOG_VERBOSE MSG="Adaptive Purge"
      #LINE_PURGE
      VORON_PURGE                                   # Adaptive Purge
    {% else %}
      LOG_VERBOSE MSG="Prime Line"
      PRIME_LINE EXTRUDER={target_extruder}
    {% endif %}

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    LOG_DEBUG MSG="Pause the actual running print"
    #FILAMENT_MOTION_SENSOR_DISABLE
    ##### set defaults #####
    {% set x = params.X|default(300) %}      #edit to your park position
    {% set y = params.Y|default(30) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    LOG_DEBUG MSG="park position x={X}, y={y}, z={z}, e={e}"
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    LOG_DEBUG MSG="z_safe={z_safe}"
    ##### end of definitions #####
    LOG_VERBOSE MSG="PAUSE_BASE"
    PAUSE_BASE
    LOG_VERBOSE MSG="G91 Incremental positioning"
    G91                         # Incremental positioning 
    {% if printer.extruder.can_extrude|lower == 'true' %}
      LOG_VERBOSE MSG="retraction {e}"
      #G1 E-{e} F2100
      G10
    {% else %}
      LOG_WARNING MSG="Extruder not hot enough"
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      LOG_VERBOSE MSG="G1 Z{z_safe}"
      G1 Z{z_safe}
      LOG_VERBOSE MSG="G90 absolute positioning"
      G90
      LOG_VERBOSE MSG="G1 X{x} Y{y} F6000"
      G1 X{x} Y{y} F6000
    {% else %}
      LOG_WARNING MSG="Printer not homed"
    {% endif %}

    LOG_VERBOSE MSG="set timeout to 12 hours"
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    LOG_DEBUG MSG="RESUME"
    
    LOG_VERBOSE MSG="set timeout back to configured value"
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
      LOG_DEBUG MSG="No parameters provided"
    {% endif %}
    ##### end of definitions #####
    LOG_DEBUG MSG="Resume e:{e}, get_params:{get_params}"

    LOG_VERBOSE MSG="G91 relative positioning"
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      LOG_DEBUG MSG="Retractiong fillamet"
      #G1 E{e} F2100
      G11
    {% else %}
      LOG_WARNING MSG="Extruder not hot enough"
    {% endif %}

    ENABLE_FANS

    #FILAMENT_MOTION_SENSOR_ENABLE
    LOG_VERBOSE MSG="RESUME_BASE {get_params}"  
    RESUME_BASE {get_params}

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    LOG_DEBUG MSG="PRINT_END"
    LOG_VERBOSE MSG="wait for buffer to clear"
    M400                           ; wait for buffer to clear
    FILAMENT_MOTION_SENSOR_DISABLE
    LOG_VERBOSE MSG="zero the extruder"
    G92 E0                         ; zero the extruder
    LOG_VERBOSE MSG="retract filament"
    #G1 E-10.0 F3600                ; retract filament
    G10
    LOG_VERBOSE MSG="G91 relative positioning"
    G91                            ; relative positioning
    LOG_VERBOSE MSG="move nozzle to remove stringing"
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    LOG_VERBOSE MSG="TURN_OFF_HEATERS"
    TURN_OFF_HEATERS
    LOG_VERBOSE MSG="turn off fan"
    M107                           ; turn off fan
    DISABLE_FANS
    LOG_VERBOSE MSG="move nozzle up 2mm"
    G1 Z2 F3000                    ; move nozzle up 2mm
    LOG_VERBOSE MSG="absolute positioning"
    G90                            ; absolute positioning
    LOG_VERBOSE MSG="park nozzle at rear"
    PARK_REAR                      ; park nozzle at rear
    LOG_VERBOSE MSG="BED_MESH_CLEAR"
    BED_MESH_CLEAR
    LOG_VERBOSE MSG="Turn off stepper motors"
    M84                            ; Turn off stepper motors
    QUERY_AIR_FILTER

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    LOG_DEBUG MSG="CANCEL_PRINT"
    LOG_VERBOSE MSG="wait for buffer to clear"
    M400                           ; wait for buffer to clear
    #FILAMENT_MOTION_SENSOR_DISABLE

    LOG_VERBOSE MSG="set timeout back to configured value"
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value

    LOG_VERBOSE MSG="zero the extruder"
    G92 E0                         ; zero the extruder
    LOG_VERBOSE MSG="retract filament"
    #G1 E-15.0 F3600                ; retract filament
    G10
    LOG_VERBOSE MSG="G91 relative positioning"
    G91                            ; relative positioning
    LOG_VERBOSE MSG="move nozzle to remove stringing"
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    LOG_VERBOSE MSG="TURN_OFF_HEATERS"
    TURN_OFF_HEATERS
    LOG_VERBOSE MSG="CANCEL_PRINT_BASE"
    CANCEL_PRINT_BASE
    LOG_VERBOSE MSG="turn off fan"
    M107                           ; turn off fan
    {% if printer["gcode_macro _print_variables"].bedfans|default(False) %}
      LOG_VERBOSE MSG="Turning off  bedfans"
      SET_FAN_SPEED FAN=bedfans SPEED=0                         # Turns off the bedfans
    {% endif %}
    LOG_VERBOSE MSG="move nozzle up 2mm"
    G1 Z2 F3000                    ; move nozzle up 2mm
    LOG_VERBOSE MSG="absolute positioning"
    G90                            ; absolute positioning
    LOG_VERBOSE MSG="park nozzle at rear"
    PARK_REAR                      ; park nozzle at rear
    QUERY_AIR_FILTER

[gcode_macro PARK_REAR]
gcode:
    {% set x_rear = printer.toolhead.axis_maximum.x|float %}
    {% set y_rear = printer.toolhead.axis_maximum.y|float %}
    G0 X{x_rear} Y{y_rear} F3600      # park nozzle at rear

